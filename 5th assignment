prot)
file=open("rosalind_prot.txt")
line=file.readlines()
seq=str(line[0].strip())
def translate(seq): 
    table={"UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
       "UCU":"S", "UCC":"S", "UCA":"S", "UCG":"S",
       "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
       "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
       "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
       "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
       "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
       "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
       "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
       "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
       "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
       "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
       "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
       "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
       "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
       "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G",}
    protein ="" 
    if len(seq)%3 == 0: 
        for i in range(0, len(seq), 3): 
            codon = seq[i:i + 3] 
            if table[codon] != "STOP":
                protein+= table[codon] 
    return protein 
print(translate(seq))

splc)
from Bio import SeqIO
lst=[]
with open("rosalind_splc.txt", "r") as handle:
    for seq in SeqIO.parse(handle, "fasta"):
        id=seq.id
        sequ=str(seq.seq.transcribe())
        lst.append(sequ)
    dna=lst[0]
    exo=lst[1:]
    for i in range(len(exo)):
        dna=dna.replace(exo[i],'')
    
    def translate(dna): 
        table={"UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
       "UCU":"S", "UCC":"S", "UCA":"S", "UCG":"S",
       "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
       "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
       "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
       "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
       "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
       "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
       "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
       "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
       "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
       "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
       "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
       "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
       "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
       "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G"}
        protein ="" 
        if len(dna)%3 == 0: 
            for i in range(0, len(dna), 3): 
                codon = dna[i:i + 3] 
                if table[codon] != "STOP":
                    protein+= table[codon] 
        return protein 
    print(translate(dna))
    
tran)
from Bio.Seq import Seq
from Bio import SeqIO
lst=[]
trans=0
tranv=0
with open("rosalind_tran.txt", "r") as handle:
    for seq in SeqIO.parse(handle, "fasta"):
        sequ=str(seq.seq)
        lst.append(sequ)
    seq1=lst[0]
    seq2=lst[1]
    for i in range(len(seq1)):
        if seq1[i] == seq2[i]:
            pass
        elif seq1[i] in [['A', 'G'],['C', 'T']][seq2[i] in ['C', 'T']]:
            trans+= 1
        else:
            tranv +=1
    print (trans/tranv)
 
hamm)
file=open("rosalind_hamm.txt")
line=file.readlines()
string1=str(line[0].strip())
string2=str(line[1].strip())
mis = 0
L = len(string1)
for i in range(L):
    if len(string1)==len(string2):
        if string1[i] != string2[i]:
            mis += 1
print(mis)

perm)
from itertools import permutations
import math
file=open('rosalind_perm.txt')
line=file.readlines()
n=int(line[0])
lst=[]
i=0
a=0
print(math.factorial(n))
while i<n:
    i+=1
    lst.append(i)
perm=permutations(lst)
for i in perm:
    a=a+1
    print(*i)

ptsd)
import numpy as np
from Bio import SeqIO
lst=[]
lst1=[]
for sequ in SeqIO.parse("untitled.txt", "fasta"):
    lst.append(str(sequ.seq))
mtx=np.zeros(shape=(len(lst),len(lst)))
for i in range(len(lst)):
    for j in range(i, len(lst)):
        mis=0
        for x in range(len(lst[i])):
            if lst[i][x]!=lst[j][x]:
                mis+=1
        mtx[i][j]= mis/len(lst[i])
        mtx[j][i]= mis/len(lst[i])
np.set_printoptions(precision=3, floatmode='fixed')
print(mtx)

orf)
from Bio import SeqIO
protlst=[]
with open("rosalind_orf.txt", "r") as handle:
    for seq in SeqIO.parse(handle, "fasta"):
        rna,rev=(seq.seq).transcribe(),(seq.seq).reverse_complement().transcribe()
def translate(seq):
    while 'AUG' in seq:
        seq=seq[seq.find('AUG'):] 
        for i in stops:
            for j in range(0,len(seq),3):
                if seq[j:j+3]==i:
                    orf=seq[:j]
                    protlst.append(orf.translate(to_stop=True))
        seq=seq[1:]
translate(rev),translate(rna)
for i in set(protlst):
    print(i) 
    
sseq)
from Bio import SeqIO
lst=[]
with open("rosalind_sseq.txt", "r") as handle:
    for seq in SeqIO.parse(handle, "fasta"):
        lst.append(seq.seq)
seq1,seq2=lst[0],lst[1]
starting=0
for i in seq2:
    position=seq1.find(i,starting)
    print(position + 1,end=' ')
    starting=position+1
    
tree)
file = open('rosalind_tree.txt', 'r')
line=file.readlines()
n,adj = int(line[0]),len(line[1:])
print(n-(adj+1))

edit) #Done in Sequence Similarity lession 19
from Bio import SeqIO
seq=[]
with open ('rosalind_edit.txt') as fa:
    for i  in SeqIO.parse(fa,'fasta'):
        seq.append(str(i.seq))  
s1,s2 = seq

def edit(s1, s2):
    if len(s1) > len(s2):
        s1, s2 = s2, s1
    distances = range(len(s1) + 1)
    for i2, c2 in enumerate(s2):
        distances_ = [i2+1]
        for i1, c1 in enumerate(s1):
            if c1 == c2:
                distances_.append(distances[i1])
            else:
                distances_.append(1 + min((distances[i1],
                                    distances[i1 + 1],
                                    distances_[-1])))
        distances = distances_
    return distances[-1]

print(edit(s1,s2))

inod)
file=open('rosalind_inod.txt')
lines=file.readlines()
n=int(lines[0])
print(n-2)

grph)
from Bio import SeqIO
n = 3
with open('rosalind_grph.txt') as f:
    fasta_sequences = list(SeqIO.parse(f, 'fasta')) 
for i in fasta_sequences:
    for j in fasta_sequences:
        name1, sequence1 = i.id, str(i.seq)
        name2, sequence2 = j.id, str(j.seq)
        if sequence1 == sequence2:
            continue
        suff,pref = sequence1[-n:],sequence2[:n]
        if pref== suff:
            print(name1, name2)
LCSQ)
from Bio import SeqIO
l=[]
for i in SeqIO.parse("rosalind_lcsq.txt", 'fasta'):
    l.append(str(i.seq))

X=l[0]
Y=l[1]

a=len(X) 
b=len(Y) 
g=[[0 for x in range(a+1)] for x in range(b+1)]
for q in range(1,b+1):
    for k in range(1,a+1):
        if X[k-1]==Y[q-1]:
            g[q][k]=g[q-1][k-1] + 1
        else:
            g[q][k]=max(g[q-1][k],g[q][k-1])
q=len(g)-1
k=len(g[0])-1

lcsq=''
if q and k != 0:   
    while q > 0 and k > 0:
        u=g[q-1][k]
        rg=g[q-1][k-1]
        lf=g[q][k-1]
        act=g[q][k]
        if act>rg and act > u and act>lf:
            lcsq += Y[q-1]
            q-=1
            k-=1
        elif act>rg and act==u:
            q-=1
        else:
            k-=1
    lcsq=lcsq[::-1]

print(lcsq)

GLOB)
from Bio import pairwise2
from Bio import SeqIO
blosum62 = {
    ('W', 'F'): 1, ('L', 'R'): -2, ('S', 'P'): -1, ('V', 'T'): 0,
    ('Q', 'Q'): 5, ('N', 'A'): -2, ('Z', 'Y'): -2, ('W', 'R'): -3,
    ('Q', 'A'): -1, ('S', 'D'): 0, ('H', 'H'): 8, ('S', 'H'): -1,
    ('H', 'D'): -1, ('L', 'N'): -3, ('W', 'A'): -3, ('Y', 'M'): -1,
    ('G', 'R'): -2, ('Y', 'I'): -1, ('Y', 'E'): -2, ('B', 'Y'): -3,
    ('Y', 'A'): -2, ('V', 'D'): -3, ('B', 'S'): 0, ('Y', 'Y'): 7,
    ('G', 'N'): 0, ('E', 'C'): -4, ('Y', 'Q'): -1, ('Z', 'Z'): 4,
    ('V', 'A'): 0, ('C', 'C'): 9, ('M', 'R'): -1, ('V', 'E'): -2,
    ('T', 'N'): 0, ('P', 'P'): 7, ('V', 'I'): 3, ('V', 'S'): -2,
    ('Z', 'P'): -1, ('V', 'M'): 1, ('T', 'F'): -2, ('V', 'Q'): -2,
    ('K', 'K'): 5, ('P', 'D'): -1, ('I', 'H'): -3, ('I', 'D'): -3,
    ('T', 'R'): -1, ('P', 'L'): -3, ('K', 'G'): -2, ('M', 'N'): -2,
    ('P', 'H'): -2, ('F', 'Q'): -3, ('Z', 'G'): -2, ('X', 'L'): -1,
    ('T', 'M'): -1, ('Z', 'C'): -3, ('X', 'H'): -1, ('D', 'R'): -2,
    ('B', 'W'): -4, ('X', 'D'): -1, ('Z', 'K'): 1, ('F', 'A'): -2,
    ('Z', 'W'): -3, ('F', 'E'): -3, ('D', 'N'): 1, ('B', 'K'): 0,
    ('X', 'X'): -1, ('F', 'I'): 0, ('B', 'G'): -1, ('X', 'T'): 0,
    ('F', 'M'): 0, ('B', 'C'): -3, ('Z', 'I'): -3, ('Z', 'V'): -2,
    ('S', 'S'): 4, ('L', 'Q'): -2, ('W', 'E'): -3, ('Q', 'R'): 1,
    ('N', 'N'): 6, ('W', 'M'): -1, ('Q', 'C'): -3, ('W', 'I'): -3,
    ('S', 'C'): -1, ('L', 'A'): -1, ('S', 'G'): 0, ('L', 'E'): -3,
    ('W', 'Q'): -2, ('H', 'G'): -2, ('S', 'K'): 0, ('Q', 'N'): 0,
    ('N', 'R'): 0, ('H', 'C'): -3, ('Y', 'N'): -2, ('G', 'Q'): -2,
    ('Y', 'F'): 3, ('C', 'A'): 0, ('V', 'L'): 1, ('G', 'E'): -2,
    ('G', 'A'): 0, ('K', 'R'): 2, ('E', 'D'): 2, ('Y', 'R'): -2,
    ('M', 'Q'): 0, ('T', 'I'): -1, ('C', 'D'): -3, ('V', 'F'): -1,
    ('T', 'A'): 0, ('T', 'P'): -1, ('B', 'P'): -2, ('T', 'E'): -1,
    ('V', 'N'): -3, ('P', 'G'): -2, ('M', 'A'): -1, ('K', 'H'): -1,
    ('V', 'R'): -3, ('P', 'C'): -3, ('M', 'E'): -2, ('K', 'L'): -2,
    ('V', 'V'): 4, ('M', 'I'): 1, ('T', 'Q'): -1, ('I', 'G'): -4,
    ('P', 'K'): -1, ('M', 'M'): 5, ('K', 'D'): -1, ('I', 'C'): -1,
    ('Z', 'D'): 1, ('F', 'R'): -3, ('X', 'K'): -1, ('Q', 'D'): 0,
    ('X', 'G'): -1, ('Z', 'L'): -3, ('X', 'C'): -2, ('Z', 'H'): 0,
    ('B', 'L'): -4, ('B', 'H'): 0, ('F', 'F'): 6, ('X', 'W'): -2,
    ('B', 'D'): 4, ('D', 'A'): -2, ('S', 'L'): -2, ('X', 'S'): 0,
    ('F', 'N'): -3, ('S', 'R'): -1, ('W', 'D'): -4, ('V', 'Y'): -1,
    ('W', 'L'): -2, ('H', 'R'): 0, ('W', 'H'): -2, ('H', 'N'): 1,
    ('W', 'T'): -2, ('T', 'T'): 5, ('S', 'F'): -2, ('W', 'P'): -4,
    ('L', 'D'): -4, ('B', 'I'): -3, ('L', 'H'): -3, ('S', 'N'): 1,
    ('B', 'T'): -1, ('L', 'L'): 4, ('Y', 'K'): -2, ('E', 'Q'): 2,
    ('Y', 'G'): -3, ('Z', 'S'): 0, ('Y', 'C'): -2, ('G', 'D'): -1,
    ('B', 'V'): -3, ('E', 'A'): -1, ('Y', 'W'): 2, ('E', 'E'): 5,
    ('Y', 'S'): -2, ('C', 'N'): -3, ('V', 'C'): -1, ('T', 'H'): -2,
    ('P', 'R'): -2, ('V', 'G'): -3, ('T', 'L'): -1, ('V', 'K'): -2,
    ('K', 'Q'): 1, ('R', 'A'): -1, ('I', 'R'): -3, ('T', 'D'): -1,
    ('P', 'F'): -4, ('I', 'N'): -3, ('K', 'I'): -3, ('M', 'D'): -3,
    ('V', 'W'): -3, ('W', 'W'): 11, ('M', 'H'): -2, ('P', 'N'): -2,
    ('K', 'A'): -1, ('M', 'L'): 2, ('K', 'E'): 1, ('Z', 'E'): 4,
    ('X', 'N'): -1, ('Z', 'A'): -1, ('Z', 'M'): -1, ('X', 'F'): -1,
    ('K', 'C'): -3, ('B', 'Q'): 0, ('X', 'B'): -1, ('B', 'M'): -3,
    ('F', 'C'): -2, ('Z', 'Q'): 3, ('X', 'Z'): -1, ('F', 'G'): -3,
    ('B', 'E'): 1, ('X', 'V'): -1, ('F', 'K'): -3, ('B', 'A'): -2,
    ('X', 'R'): -1, ('D', 'D'): 6, ('W', 'G'): -2, ('Z', 'F'): -3,
    ('S', 'Q'): 0, ('W', 'C'): -2, ('W', 'K'): -3, ('H', 'Q'): 0,
    ('L', 'C'): -1, ('W', 'N'): -4, ('S', 'A'): 1, ('L', 'G'): -4,
    ('W', 'S'): -3, ('S', 'E'): 0, ('H', 'E'): 0, ('S', 'I'): -2,
    ('H', 'A'): -2, ('S', 'M'): -1, ('Y', 'L'): -1, ('Y', 'H'): 2,
    ('Y', 'D'): -3, ('E', 'R'): 0, ('X', 'P'): -2, ('G', 'G'): 6,
    ('G', 'C'): -3, ('E', 'N'): 0, ('Y', 'T'): -2, ('Y', 'P'): -3,
    ('T', 'K'): -1, ('A', 'A'): 4, ('P', 'Q'): -1, ('T', 'C'): -1,
    ('V', 'H'): -3, ('T', 'G'): -2, ('I', 'Q'): -3, ('Z', 'T'): -1,
    ('C', 'R'): -3, ('V', 'P'): -2, ('P', 'E'): -1, ('M', 'C'): -1,
    ('K', 'N'): 0, ('I', 'I'): 4, ('P', 'A'): -1, ('M', 'G'): -3,
    ('T', 'S'): 1, ('I', 'E'): -3, ('P', 'M'): -2, ('M', 'K'): -1,
    ('I', 'A'): -1, ('P', 'I'): -3, ('R', 'R'): 5, ('X', 'M'): -1,
    ('L', 'I'): 2, ('X', 'I'): -1, ('Z', 'B'): 1, ('X', 'E'): -1,
    ('Z', 'N'): 0, ('X', 'A'): 0, ('B', 'R'): -1, ('B', 'N'): 3,
    ('F', 'D'): -3, ('X', 'Y'): -1, ('Z', 'R'): 0, ('F', 'H'): -1,
    ('B', 'F'): -3, ('F', 'L'): 0, ('X', 'Q'): -1, ('B', 'B'): 4
}
lst=[]
with open("rosalind_glob.txt", "r") as handle:
    for seq in SeqIO.parse(handle, "fasta"):
        id=seq.id
        sequ=str(seq.seq)
        lst.append(sequ)
prot1=lst[0]
prot2=lst[1]
al=pairwise2.align.globalds(prot1,prot2,blosum62,-5,-5)
print(int(al[1][2]))

edta)
from Bio import SeqIO
f = open("rosalind_edta.txt", "r")
seqs = SeqIO.parse(f, "fasta")
seqs = [str(s.seq) for s in seqs]
s=seqs[0]
t=seqs[1]
matr, prev = [[0] * (len(t) + 1) for _ in range(len(s) + 1)], {}
for i in range(len(s) + 1):
    matr[i][0], prev[(i, 0)] = -i, (i - 1, 0)
for j in range(len(t) + 1):
    matr[0][j], prev[(0, j)] = -j, (0, j - 1)
for i in range(1, len(s) + 1):
    for j in range(1, len(t) + 1):
        matr[i][j], prev[(i, j)] = max((matr[i - 1][j] - 1, (i - 1, j)),
                        (matr[i][j - 1] - 1, (i, j - 1)),
                        (matr[i - 1][j - 1] - (s[i - 1] != t[j - 1]), (i - 1, j - 1)))
print(-matr[-1][-1])

i, j, ss, tt = len(s), len(t), "", ""
while i > 0 or j > 0:
    (i, j), previ, prevj = prev[(i, j)], i, j
    if i == previ:
        ss += "-"
        tt += t[j]
    elif j == prevj:
        ss += s[i]
        tt += "-"
    else:
        ss += s[i]
        tt += t[j]
print(ss[::-1])
print(tt[::-1])
